{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","_useState","useState","_useState2","Object","slicedToArray","results","setResults","_useState3","_useState4","query","setQuery","_useState5","_useState6","error","setError","searchInputRef","useRef","useEffect","getResult","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","data","hits","t0","document","title","stop","apply","this","arguments","Fragment","onSubmit","e","preventDefault","type","value","onChange","target","ref","className","onClick","current","focus","map","result","key","objectID","rel","href","url","message","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOC,EAAAC,EAAAC,cCAD,WAAe,IAAAC,EACEC,mBAAS,IADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACZI,EADYJ,EAAA,GAAAK,EAEFN,mBAAS,cAFPO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAErBE,EAFqBD,EAAA,GAEdE,EAFcF,EAAA,GAAAG,EAGFV,qBAHEW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGrBE,EAHqBD,EAAA,GAGdE,EAHcF,EAAA,GAItBG,EAAiBC,mBAEvBC,oBAAU,WACRC,KAEC,IAEH,IAAMA,EAAS,eAAAC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAkB,EAAAvB,EAAAwB,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAvB,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAESC,IAAMC,IAAN,8CAAAC,OACyBtB,IAHlC,OAERe,EAFQE,EAAAM,KAKd1B,EAAWkB,EAASS,KAAKC,MALXR,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAOdZ,EAAQY,EAAAS,IAPM,QAShBC,SAASC,MAAT,UAAAN,OAA2BtB,GATX,yBAAAiB,EAAAY,SAAAf,EAAA,iBAAH,yBAAAJ,EAAAoB,MAAAC,KAAAC,YAAA,GAuBf,OACE5C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4C,SAAA,KACE7C,EAAAC,EAAAC,cAAA,QAAM4C,SAbW,SAAAC,GACnBA,EAAEC,iBACF3B,MAYIrB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACE+C,KAAK,OACLC,MAAOtC,EACPuC,SAAU,SAAAJ,GAAC,OAAIlC,EAASkC,EAAEK,OAAOF,QACjCG,IAAKnC,IAEPlB,EAAAC,EAAAC,cAAA,UAAQoD,UAAU,wBAAwBL,KAAK,UAA/C,UAGAjD,EAAAC,EAAAC,cAAA,UAAQ+C,KAAK,SAASM,QAlBR,WAClB1C,EAAS,IACTK,EAAesC,QAAQC,UAgBnB,UAKFzD,EAAAC,EAAAC,cAAA,UACGM,EAAQkD,IAAI,SAAAC,GAAM,OACjB3D,EAAAC,EAAAC,cAAA,MAAI0D,IAAKD,EAAOE,UACd7D,EAAAC,EAAAC,cAAA,KAAG4D,IAAI,sBAAsBV,OAAO,SAASW,KAAMJ,EAAOK,KACvDL,EAAOnB,WAKfxB,GAAShB,EAAAC,EAAAC,cAAA,WAAMc,EAAMiD,WD7DZ,MAAS1B,SAAS2B,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3995fe05.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nimport './App.css'\n\nexport default function App() {\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState(\"reacthooks\");\n  const [error, setError] = useState();\n  const searchInputRef = useRef();\n\n  useEffect(() => {\n    getResult();\n    \n  }, []);\n\n  const getResult = async () => {\n    try {\n      const response = await axios.get(\n        `https://hn.algolia.com/api/v1/search?query=${query}`\n      );\n      setResults(response.data.hits);\n    } catch (err) {\n      setError(err);\n    }\n    document.title = `Search ${query}`\n  };\n\n  const handleSearch = e => {\n    e.preventDefault();\n    getResult();\n    \n  };\n\n  const handleClear = () => {\n    setQuery(\"\");\n    searchInputRef.current.focus();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSearch}>\n        <legend>IT Search</legend>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          ref={searchInputRef}\n        />\n        <button className=\"search button-primary\" type=\"submit\">\n          Search\n        </button>\n        <button type=\"button\" onClick={handleClear}>\n          Clear\n        </button>\n      </form>\n\n      <ul>\n        {results.map(result => (\n          <li key={result.objectID}>\n            <a rel=\"noopener noreferrer\" target=\"_blank\" href={result.url}>\n              {result.title}\n            </a>\n          </li>\n        ))}\n      </ul>\n      {error && <div>{error.message}</div>}\n    </>\n  );\n}\n"],"sourceRoot":""}